/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Applifting Blog Engine
 * This OpenAPI specification describes APIs available in the Applifing Blog Engine application.

**Following APIs are exposed:**
- Authentication - This API is used for login and access token acquisition
- Blog - This API is a CRUD over blog entries
- Comments - This API is used for comment creation and voting
- Image - This API serves as an image store. It is assumed that images are uploaded during article creation.
- Multitenancy - This API allows multiple blog instances to be active in a single application.

**Authorization**

All APIs except the Multitenancy API, are protected using API-KEY Token, which has either been given to the candidate during the exercise introduction or the candidate can create it themselves using the Multitenancy API `POST /tenants` endpoint. If you were already given a token, please prefer  to use it instead of creating a new one.   API-KEY Token MUST be sent like so `X-API-KEY: my-x-api-key` in the HTTP header.

Comments, Blog and Images APIs are also protected using the Access Token acquired from the `/login` EndPoint. Access Token MUST be sent like so `Authorization: my-access-token` in the HTTP header.
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type { AxiosRequestConfig, AxiosResponse } from 'axios'

import type {
    AccessToken,
    Article,
    ArticleDetail,
    Comment,
    ImageInfo,
    ListArticlesParams,
    PostImagesBody,
    PostLoginBody,
    Tenant,
} from './models'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B

type WritableKeys<T> = {
    [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>
}[keyof T]

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never

type Writable<T> = Pick<T, WritableKeys<T>>
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
    ? {
          [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P]
      }
    : DistributeReadOnlyOverUnions<T>

/**
 * @summary Sign in into the application
 */
export const postLogin = <TData = AxiosResponse<AccessToken>>(
    postLoginBody: PostLoginBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(`/login`, postLoginBody, options)
}

/**
 * @summary List of all articles
 */
export const listArticles = <TData = AxiosResponse<Article[]>>(
    params?: ListArticlesParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`/articles`, {
        ...options,
        params: { ...params, ...options?.params },
    })
}

/**
 * @summary Create an article
 */
export const createArticle = <TData = AxiosResponse<ArticleDetail>>(
    articleDetail: NonReadonly<ArticleDetail>,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(`/articles`, articleDetail, options)
}

/**
 * @summary Article detail with content and comments
 */
export const getArticle = <TData = AxiosResponse<ArticleDetail>>(
    articleId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`/articles/${articleId}`, options)
}

/**
 * @summary Update article detail
 */
export const updateArticle = <TData = AxiosResponse<ArticleDetail>>(
    articleId: string,
    articleDetail: NonReadonly<ArticleDetail>,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.patch(`/articles/${articleId}`, articleDetail, options)
}

/**
 * @summary Delete article
 */
export const deleteArticle = <TData = AxiosResponse<void>>(articleId: string, options?: AxiosRequestConfig): Promise<TData> => {
    return axios.delete(`/articles/${articleId}`, options)
}

/**
 * @summary Create comment
 */
export const postComments = <TData = AxiosResponse<Comment>>(
    comment: NonReadonly<Comment>,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(`/comments`, comment, options)
}

/**
 * @summary Upvote comment
 */
export const postCommentsCommentIdVoteUp = <TData = AxiosResponse<Comment>>(
    commentId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(`/comments/${commentId}/vote/up`, undefined, options)
}

/**
 * @summary Downvote comment
 */
export const postCommentsCommentIdVoteDown = <TData = AxiosResponse<Comment>>(
    commentId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(`/comments/${commentId}/vote/down`, undefined, options)
}

/**
 * @summary Upload an image
 */
export const postImages = <TData = AxiosResponse<ImageInfo[]>>(
    postImagesBody: PostImagesBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    const formData = new FormData()
    if (postImagesBody.image !== undefined) {
        postImagesBody.image.forEach((value) => formData.append(`image`, value))
    }

    return axios.post(`/images`, formData, options)
}

/**
 * @summary Download image
 */
export const getImagesImageId = <TData = AxiosResponse<void>>(imageId: string, options?: AxiosRequestConfig): Promise<TData> => {
    return axios.get(`/images/${imageId}`, options)
}

/**
 * @summary Delete image
 */
export const deleteImagesImageId = <TData = AxiosResponse<void>>(
    imageId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.delete(`/images/${imageId}`, options)
}

/**
 * @summary Create tenant
 */
export const postTenants = <TData = AxiosResponse<Tenant>>(
    tenant: NonReadonly<Tenant>,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(`/tenants`, tenant, options)
}

/**
 * @summary Info for a specific tenant
 */
export const getTenantsTenantId = <TData = AxiosResponse<Tenant>>(
    tenantId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`/tenants/${tenantId}`, options)
}

export type PostLoginResult = AxiosResponse<AccessToken>
export type ListArticlesResult = AxiosResponse<Article[]>
export type CreateArticleResult = AxiosResponse<ArticleDetail>
export type GetArticleResult = AxiosResponse<ArticleDetail>
export type UpdateArticleResult = AxiosResponse<ArticleDetail>
export type DeleteArticleResult = AxiosResponse<void>
export type PostCommentsResult = AxiosResponse<Comment>
export type PostCommentsCommentIdVoteUpResult = AxiosResponse<Comment>
export type PostCommentsCommentIdVoteDownResult = AxiosResponse<Comment>
export type PostImagesResult = AxiosResponse<ImageInfo[]>
export type GetImagesImageIdResult = AxiosResponse<void>
export type DeleteImagesImageIdResult = AxiosResponse<void>
export type PostTenantsResult = AxiosResponse<Tenant>
export type GetTenantsTenantIdResult = AxiosResponse<Tenant>
