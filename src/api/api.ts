/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Applifting Blog Engine
 * This OpenAPI specification describes APIs available in the Applifing Blog Engine application.

**Following APIs are exposed:**
- Authentication - This API is used for login and access token acquisition
- Blog - This API is a CRUD over blog entries
- Comments - This API is used for comment creation and voting
- Image - This API serves as an image store. It is assumed that images are uploaded during article creation.
- Multitenancy - This API allows multiple blog instances to be active in a single application.

**Authorization**

All APIs except the Multitenancy API, are protected using API-KEY Token, which has either been given to the candidate during the exercise introduction or the candidate can create it themselves using the Multitenancy API `POST /tenants` endpoint. If you were already given a token, please prefer  to use it instead of creating a new one.   API-KEY Token MUST be sent like so `X-API-KEY: my-x-api-key` in the HTTP header.

Comments, Blog and Images APIs are also protected using the Access Token acquired from the `/login` EndPoint. Access Token MUST be sent like so `Authorization: my-access-token` in the HTTP header.
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type { AxiosRequestConfig, AxiosResponse } from 'axios'

import type {
    AccessToken,
    Article,
    ArticleDetail,
    Comment,
    ImageInfo,
    ListArticlesParams,
    PostImagesBody,
    PostLoginBody,
    Tenant,
} from './models'

/**
 * @summary List of all articles
 */
export const listArticles = <TData = AxiosResponse<Article[]>>(
    params?: ListArticlesParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`/articles`, {
        ...options,
        params: { ...params, ...options?.params },
    })
}
/**
 * @summary Article detail with content and comments
 */
export const getArticle = <TData = AxiosResponse<ArticleDetail>>(
    articleId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`/articles/${articleId}`, options)
}

/**
 * @summary Info for a specific tenant
 */
export const getTenantsTenantId = <TData = AxiosResponse<Tenant>>(
    tenantId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`/tenants/${tenantId}`, options)
}
